{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: This is a development server. Do not use it in a production deployment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [20/Jan/2021 01:56:16] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
      "[2021-01-20 01:56:29,292] ERROR in app: Exception on /js_login [POST]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"<ipython-input-1-16a2900db67b>\", line 57, in js_login\n",
      "    initiate_session(username)\n",
      "  File \"C:\\Users\\Dell\\Desktop\\milestone3-riddle-quiz-master\\milestone3-riddle-quiz-master\\helper.py\", line 61, in initiate_session\n",
      "    session['username'] = user\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\werkzeug\\local.py\", line 350, in __setitem__\n",
      "    self._get_current_object()[key] = value\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\sessions.py\", line 102, in _fail\n",
      "    raise RuntimeError(\n",
      "RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.\n",
      "127.0.0.1 - - [20/Jan/2021 01:56:29] \"\u001b[35m\u001b[1mPOST /js_login HTTP/1.1\u001b[0m\" 500 -\n",
      "[2021-01-20 01:56:30,485] ERROR in app: Exception on /js_login [POST]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"<ipython-input-1-16a2900db67b>\", line 57, in js_login\n",
      "    initiate_session(username)\n",
      "  File \"C:\\Users\\Dell\\Desktop\\milestone3-riddle-quiz-master\\milestone3-riddle-quiz-master\\helper.py\", line 61, in initiate_session\n",
      "    session['username'] = user\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\werkzeug\\local.py\", line 350, in __setitem__\n",
      "    self._get_current_object()[key] = value\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\sessions.py\", line 102, in _fail\n",
      "    raise RuntimeError(\n",
      "RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.\n",
      "127.0.0.1 - - [20/Jan/2021 01:56:30] \"\u001b[35m\u001b[1mPOST /js_login HTTP/1.1\u001b[0m\" 500 -\n",
      "[2021-01-20 01:56:30,615] ERROR in app: Exception on /js_login [POST]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"<ipython-input-1-16a2900db67b>\", line 57, in js_login\n",
      "    initiate_session(username)\n",
      "  File \"C:\\Users\\Dell\\Desktop\\milestone3-riddle-quiz-master\\milestone3-riddle-quiz-master\\helper.py\", line 61, in initiate_session\n",
      "    session['username'] = user\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\werkzeug\\local.py\", line 350, in __setitem__\n",
      "    self._get_current_object()[key] = value\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\sessions.py\", line 102, in _fail\n",
      "    raise RuntimeError(\n",
      "RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.\n",
      "127.0.0.1 - - [20/Jan/2021 01:56:30] \"\u001b[35m\u001b[1mPOST /js_login HTTP/1.1\u001b[0m\" 500 -\n",
      "[2021-01-20 01:56:30,936] ERROR in app: Exception on /js_login [POST]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"<ipython-input-1-16a2900db67b>\", line 57, in js_login\n",
      "    initiate_session(username)\n",
      "  File \"C:\\Users\\Dell\\Desktop\\milestone3-riddle-quiz-master\\milestone3-riddle-quiz-master\\helper.py\", line 61, in initiate_session\n",
      "    session['username'] = user\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\werkzeug\\local.py\", line 350, in __setitem__\n",
      "    self._get_current_object()[key] = value\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\sessions.py\", line 102, in _fail\n",
      "    raise RuntimeError(\n",
      "RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.\n",
      "127.0.0.1 - - [20/Jan/2021 01:56:30] \"\u001b[35m\u001b[1mPOST /js_login HTTP/1.1\u001b[0m\" 500 -\n",
      "[2021-01-20 01:56:31,079] ERROR in app: Exception on /js_login [POST]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 2447, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1821, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1950, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\app.py\", line 1936, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"<ipython-input-1-16a2900db67b>\", line 57, in js_login\n",
      "    initiate_session(username)\n",
      "  File \"C:\\Users\\Dell\\Desktop\\milestone3-riddle-quiz-master\\milestone3-riddle-quiz-master\\helper.py\", line 61, in initiate_session\n",
      "    session['username'] = user\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\werkzeug\\local.py\", line 350, in __setitem__\n",
      "    self._get_current_object()[key] = value\n",
      "  File \"C:\\Users\\Dell\\project\\envs\\flask\\lib\\site-packages\\flask\\sessions.py\", line 102, in _fail\n",
      "    raise RuntimeError(\n",
      "RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [20/Jan/2021 01:56:31] \"\u001b[35m\u001b[1mPOST /js_login HTTP/1.1\u001b[0m\" 500 -\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "from helper import *\n",
    "# import env # needed for development unittesting\n",
    "\n",
    "app = Flask(__name__)\n",
    "app.secret_key = os.environ.get(\"SECRET_KEY\")\n",
    "score_data = 'data/scoreboard.txt'\n",
    "riddle_json = 'data/riddle_data.json'\n",
    "\n",
    "\n",
    "# Set the messages you want to appear when quiz is completed based on score,\n",
    "# I defined this function in this file for easy editing by another developer\n",
    "def get_final_score_message(score):\n",
    "    message = \"\"\n",
    "    if session['url'] > 10:\n",
    "        if score < 3:\n",
    "            message = \"You scored \" + str(session[\"score\"]) + \"/10. Terrible\"\n",
    "        elif score < 6:\n",
    "            message = \"You scored \" + str(session[\"score\"]) + \"/10. Mediocre\"\n",
    "        elif score < 8:\n",
    "            message = \"You scored \" + str(session[\"score\"]) + \"/10. Above average\"\n",
    "        elif score < 10:\n",
    "            message = \"You scored \" + str(session[\"score\"]) + \"/10. Good\"\n",
    "        else:\n",
    "            message = \"You scored \" + str(session[\"score\"]) + \"/10. Excellent\"\n",
    "\n",
    "    return message\n",
    "\n",
    "\n",
    "# Login page to set session library of username and score\n",
    "@app.route('/', methods=[\"GET\", \"POST\"])\n",
    "def login():\n",
    "    if request.method == \"POST\":\n",
    "        # Take username input, strip of any whitespace and then run it through\n",
    "        # the custom validation function.\n",
    "        username = request.form['username'].strip()\n",
    "        if username_validator(username) is False:\n",
    "            flash(\"Username must contain between 3 and 10 characters and cannot contain any spaces\")\n",
    "        else:\n",
    "            # Username is suitable therefore the session will be initiated\n",
    "            # with this username\"\"\"\n",
    "            initiate_session(username)\n",
    "            return redirect(url_for('quiz'))\n",
    "    return render_template(\"index.html\")\n",
    "\n",
    "\n",
    "# Login page to set session library of username and score  - for use with\n",
    "# javascript supported browsers\n",
    "@app.route('/js_login', methods=[\"GET\", \"POST\"])\n",
    "def js_login():\n",
    "    if request.method == \"POST\":\n",
    "        username = request.form['username'].strip()\n",
    "        if username_validator(username) is False:\n",
    "            flash(\"Username must contain between 3 and 10 characters and cannot contain any spaces\")\n",
    "            return render_template(\"index.html\")\n",
    "        else:\n",
    "            initiate_session(username)\n",
    "            total = questions_asked(session['url'])\n",
    "            riddle = match_page_info_with_url(riddle_json, session['url'])\n",
    "            return render_template(\"quiz_js.html\", riddle=riddle, user=session,\n",
    "                                   total=total)\n",
    "\n",
    "\n",
    "# Render riddles with pictures and current score, dependant on progress.\n",
    "@app.route('/quiz')\n",
    "def quiz():\n",
    "    total = questions_asked(session['url'])\n",
    "    riddle = match_page_info_with_url(riddle_json, session['url'])\n",
    "    # If 10 questions completed, the user will be taken to the leaderboard.\n",
    "    if session['url'] > 10:\n",
    "        return redirect('leaderboard')\n",
    "\n",
    "    return render_template(\"member.html\", riddle=riddle, user=session,\n",
    "                           total=total)\n",
    "\n",
    "\n",
    "# Validate riddle answers, adjust score, if answer incorrect flash message\n",
    "# will display incorrect answer\n",
    "# Will eventually redirect to leaderboard when all questions are\n",
    "# answered or passed.\n",
    "@app.route('/submit_answer', methods=[\"POST\"])\n",
    "def submit_answer():\n",
    "    riddle = match_page_info_with_url(riddle_json, session['url'])\n",
    "    if request.method == 'POST':\n",
    "        guess = request.form['answer'].strip().title()\n",
    "        answer = riddle[\"answer\"]\n",
    "        if session['url'] < 10:\n",
    "            if guess == answer:\n",
    "                increment_url_and_score(1, 1)\n",
    "            else:\n",
    "                flash('\"{}\" is incorrect. Please try again.'.format(\n",
    "                      request.form['answer']))\n",
    "        # If the user has answered 10 questions their score will be added to\n",
    "        # the score board.\n",
    "        elif session['url'] == 10:\n",
    "            if guess == answer:\n",
    "                increment_url_and_score(1, 1)\n",
    "                add_to_scoreboard(session['username'], session['score'],\n",
    "                                  score_data)\n",
    "            else:\n",
    "                flash('\"{}\" is incorrect. Please try again.'.format(\n",
    "                      request.form['answer']))\n",
    "        # If the user has been using the back button to try and cheat,\n",
    "        # i.e. They go back and resubmit, their session[url] will remain\n",
    "        # correct and they will redirected to the leaderboard if they have\n",
    "        # answered 10 or more questions.\n",
    "        else:\n",
    "            return redirect('leaderboard')\n",
    "\n",
    "        return redirect(url_for('quiz'))\n",
    "\n",
    "\n",
    "# For js supporting browsers\n",
    "# Validate riddle answers, adjust score, if answer incorrect flash message\n",
    "# will display incorrect answer\n",
    "# Will eventually redirect to leaderboard when all questions are answered.\n",
    "# Javascript also removes alot of the issues with users using the back button\n",
    "# to resubmit and cheat to get a higher total.\n",
    "@app.route('/js_submit_answer', methods=[\"POST\"])\n",
    "def js_submit_answer():\n",
    "    riddle = match_page_info_with_url(riddle_json, session['url'])\n",
    "    if request.method == \"POST\":\n",
    "        guess = request.form[\"answer\"]\n",
    "        guess = guess.strip().title()\n",
    "        answer = riddle['answer']\n",
    "        if session['url'] < 10:\n",
    "            if guess == answer:\n",
    "                increment_url_and_score(1, 1)\n",
    "            else:\n",
    "                flash('\"{}\" is incorrect. Please try again.'.format(\n",
    "                      request.form['answer']))\n",
    "        # If the user has answered 10 questions their score will be added\n",
    "        # to the score board.\n",
    "        elif session['url'] == 10:\n",
    "            if guess == answer:\n",
    "                increment_url_and_score(1, 1)\n",
    "                add_to_scoreboard(session['username'], session['score'],\n",
    "                                  score_data)\n",
    "                scores = get_scoreboard_data(score_data)\n",
    "                message = get_final_score_message(session['score'])\n",
    "                return render_template('leaderboard_js.html', scores=scores,\n",
    "                                       user=session, message=message)\n",
    "\n",
    "            else:\n",
    "                flash('\"{}\" is incorrect. Please try again.'.format(\n",
    "                      request.form['answer']))\n",
    "\n",
    "        total = questions_asked(session['url'])\n",
    "        riddle = match_page_info_with_url(riddle_json, session['url'])\n",
    "        return render_template(\"quiz_js.html\", riddle=riddle, user=session,\n",
    "                               total=total)\n",
    "\n",
    "\n",
    "# Skip button included to pass question and yet increment the session url by 1\n",
    "@app.route('/skip_question', methods=[\"POST\"])\n",
    "def skip_question():\n",
    "    if request.method == 'POST':\n",
    "        if session['url'] == 10:\n",
    "            # The url is increased but not the score.\n",
    "            increment_url_and_score(1, 0)\n",
    "            # redirected to leaderboard if 10 questions have been attempted.\n",
    "            add_to_scoreboard(session['username'], session['score'],\n",
    "                              score_data)\n",
    "            return redirect('leaderboard')\n",
    "        else:\n",
    "            # The url is increased but not the score.\n",
    "            increment_url_and_score(1, 0)\n",
    "    return redirect(url_for('quiz'))\n",
    "\n",
    "\n",
    "# Skip button included to skip over question and still increment the\n",
    "# session url by 1 - JS supported browsers\n",
    "@app.route('/js_skip_question', methods=[\"POST\"])\n",
    "def js_skip_question():\n",
    "    if request.method == \"POST\":\n",
    "        if session['url'] == 10:\n",
    "            increment_url_and_score(1, 0)\n",
    "            add_to_scoreboard(session['username'], session['score'],\n",
    "                              score_data)\n",
    "            scores = get_scoreboard_data(score_data)\n",
    "            message = get_final_score_message(session['score'])\n",
    "            return render_template('leaderboard_js.html', scores=scores,\n",
    "                                   user=session, message=message)\n",
    "        else:\n",
    "            increment_url_and_score(1, 0)\n",
    "            total = questions_asked(session['url'])\n",
    "            riddle = match_page_info_with_url(riddle_json, session['url'])\n",
    "            return render_template(\"quiz_js.html\", riddle=riddle, user=session,\n",
    "                                   total=total)\n",
    "\n",
    "\n",
    "# Display leaderboard\n",
    "@app.route('/leaderboard')\n",
    "def leaderboard():\n",
    "    scores = get_scoreboard_data(score_data)\n",
    "    # This message will only be displayed once user has completed quiz and\n",
    "    # it will correspond with their score.\n",
    "    message = get_final_score_message(session['score'])\n",
    "    return render_template(\"leaderboard.html\", scores=scores, user=session,\n",
    "                           message=message)\n",
    "\n",
    "\n",
    "@app.route('/leaderboard_no_login')\n",
    "def leaderboard_no_login():\n",
    "    scores = get_scoreboard_data(score_data)\n",
    "    # No message as there has been no score set by the user.\n",
    "    message = \" \"\n",
    "    return render_template(\"leaderboard.html\", scores=scores, user=session,\n",
    "                           message=message)\n",
    "\n",
    "\n",
    "@app.route('/js_leaderboard_no_login')\n",
    "def js_leaderboard_no_login():\n",
    "    scores = get_scoreboard_data(score_data)\n",
    "    # No message as there has been no score set by the user.\n",
    "    message = \" \"\n",
    "    return render_template(\"leaderboard2_js.html\", scores=scores, user=session,\n",
    "                           message=message)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
